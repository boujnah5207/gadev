@model GAppsDev.Models.CreateOrderModel

@{
    ViewBag.Title = Loc.Dic.EditOrder;
    ViewBag.PageName = "Orders";
    ViewBag.SubPageName = "AllOrders";

    bool hasFuturePermission = DA.Roles.HasRole((DA.RoleType)ViewBag.CurrentUser.Roles, DA.RoleType.FutureOrderWriter);
}

@section ExtraScripts{
    <script type="text/javascript" src='@Url.Action("LocalizeJavascript", "Localization")'></script>
    <script src="~/Scripts/createOrderScript.js"></script>
    <script>
        $(function () {
            beginEdit("@ViewBag.ExistingItems");
        });
    </script>
}

<fieldset>
    <legend>@Loc.Dic.ChosenSupplier</legend>
    <label class="inlineLabel" for="choosenSupplier">@Loc.Dic.Supplier: </label>
    <span class='selectedSupplier'>@Model.Order.Supplier.Name </span>
    <input id="AddOrderItemButton" type="button" value="@Loc.Dic.CreateItemForSupplier" onclick="addOrderItem()" />
</fieldset>

@using (Html.BeginForm("Edit", "Orders", FormMethod.Post, new { id = "mainForm" }))
{
<fieldset id="formContainer">
    <legend>@Loc.Dic.OrderItems</legend>
        @Html.ValidationSummary(true)
        
        @Html.HiddenFor(model => model.Order.SupplierId, new { id = "SupplierId" })
        @Html.HiddenFor(model => model.Order.Id)
        <input id="ItemsAsString" name="itemsString" type="hidden" value="" />

        <div class="editor-field">
            <input id="orderItemsList" name="orderItemsList" type="hidden" value="" />

            <div id="AddNewItemContainer">
                @Loc.Dic.Item: <span id="loadingMessage">@Loc.Dic.Loading... </span>
                @Loc.Dic.Quantity:
                <input style="width: 50px" id="itemQuantity" type="text" />
                @Loc.Dic.SingleItemPrice:
                <input style="width: 50px" id="itemPrice" type="text" />
                @Loc.Dic.TotalPrice:
                <input class="display" id="itemFinalPrice" type="text" disabled="disabled" />
                <input id="AddNewItemButton" type="button" value="@Loc.Dic.Add" />
            </div>
        </div>
        
        <fieldset>
            <legend>@Loc.Dic.OrderItems</legend>

            <div id="orderItems">
                <span>@Loc.Dic.NoItemsInOrder.</span>
            </div>

        </fieldset>
        <br />
        <span>@Loc.Dic.TotalPrice: </span>
        <input class="display" type="text" id="totalOrderPrice" disabled="disabled" />
    <br />
</fieldset>

<fieldset>
    <legend>@Loc.Dic.BudgetAllocations</legend>
        <div id="OrderAllocationsContainer">
            @if (hasFuturePermission)
            {
                @Html.CheckBoxFor(model => model.IsFutureOrder, new { id = "isFutureOrder" }) <span>@Loc.Dic.FutureOrder</span>
                <br />
            }
            else
            {
                @Html.Hidden("IsFutureOrder", false, new { id = "isFutureOrder" })
            }
            @Loc.Dic.BudgetAllocation: 
            <select id="allocationsSelectList" class="allocationsList" name="BudgetAllocationId">
                @for (int i = 0; i < ViewBag.Allocations.Count; i++)
                {
                    int maxMonth = ViewBag.BudgetYear == DateTime.Now.Year ? DateTime.Now.Month : 1;

                    DB.Budgets_Allocations allocation = ((DB.Budgets_Allocations)ViewBag.Allocations[i]);
                    decimal amount = allocation.Budgets_AllocationToMonth.Where(m => m.MonthId <= maxMonth).Sum(x => x.Amount);
                    <option data-amount="@amount" value="@allocation.Id">@allocation.DisplayName (@amount)</option>
                }
            </select>

            @if (hasFuturePermission)
            {
                <span id="monthSelectContainer" @if (!Model.IsFutureOrder)
                                                {<text>style="display:none;"</text>}>
                    @Loc.Dic.Month:
            
            @for (int i = 0; i < ViewBag.Allocations.Count; i++)
            {
                <select id="allocation-@ViewBag.Allocations[i].Id" class="allocationMonthList" @if (i != 0)
                                                                                               {<text>style="display:none;"</text>}>

                    @{
                                                                                               int startingMonth = ViewBag.BudgetYear == DateTime.Now.Year ? DateTime.Now.Month : 1;
                    }
                    @for (int month = startingMonth; month <= 12; month++)
                    {
                        decimal amount;
                        if (month == DateTime.Now.Month)
                        {
                            amount = ((DB.Budgets_Allocations)ViewBag.Allocations[i]).Budgets_AllocationToMonth.Where(m => m.MonthId <= month).Sum(x => x.Amount);
                            DB.Budgets_AllocationToMonth monthAllocation = ((DB.Budgets_Allocations)ViewBag.Allocations[i]).Budgets_AllocationToMonth.SingleOrDefault(x => x.MonthId == month);
                            monthAllocation.Amount = amount;
                        }
                        else
                        {
                            DB.Budgets_AllocationToMonth monthAllocation = ((DB.Budgets_Allocations)ViewBag.Allocations[i]).Budgets_AllocationToMonth.SingleOrDefault(x => x.MonthId == month);
                            amount = monthAllocation == null ? 0 : monthAllocation.Amount;
                            monthAllocation.Amount = amount;
                        }
                        
                        <option data-amount="@amount" value="@month">@Html.GetMonthName(month) (@amount)</option>
                    }

                </select>
            }
                </span>
            }

            @Loc.Dic.AmountFromAllocation:
            <input type="text" id="allocationAmount" value="" />
            <input id="addAllocationBtn" type="button" value="@Loc.Dic.AddAllocation" onClick="addAllocation()" />

            @if (ViewBag.ReAllocationRequired)
            {
                <br />
                <span style="color: red;">@Loc.Dic.BasketsChangedPleaseReAllocate. </span>
            }
            @if (hasFuturePermission)
            {
                <div id="FutureOrderContainer" @if (!Model.IsFutureOrder)
                                               {<text>style="display:none;"</text>}>
                    <fieldset id="futureAllocationsFieldset">
                        <legend>@Loc.Dic.BudgetAllocations</legend>

                        <div id="futureAllocationsContainer">
                            @if (Model.IsFutureOrder && Model.Allocations.Count > 0)
                            {
                                for (int i = 0; i < Model.Allocations.Count; i++)
                                {
                                    bool allocationMonthExists = false;
                                    DB.Budgets_Allocations existingAllocation = ((List<DB.Budgets_Allocations>)ViewBag.Allocations).SingleOrDefault(x => x.Id == Model.Allocations[i].AllocationId);
                                    DB.Budgets_AllocationToMonth existingMonth = null;
                                    if (existingAllocation != null)
                                    {
                                        existingMonth = existingAllocation.Budgets_AllocationToMonth.SingleOrDefault(x => x.MonthId == Model.Allocations[i].MonthId);
                                        if (existingMonth != null)
                                        {
                                            allocationMonthExists = true;
                                        }
                                    }

                                    bool isExeeding = allocationMonthExists && Model.Allocations[i].Amount > existingMonth.Amount;
                        
                                <div id='futureAllocation-@i' class='existingFutureAllocations @if (isExeeding)
                                                                                               {<text>exeedingAllocation</text>}'>
                                    <input type='hidden' class='isActiveField' id='futureAllocation-isActiveField-@i' name='Allocations[@i].IsActive' value='true' />
                                    <input type='hidden' class='allocationIdField' id='futureAllocation-allocationIdField-@i' name='Allocations[@i].AllocationId' value='@Model.Allocations[i].AllocationId' />
                                    <input type='hidden' class='monthIdField' id='futureAllocation-monthIdField-@i' name='Allocations[@i].MonthId' value='@Model.Allocations[i].MonthId' />
                                    <input type='hidden' class='amountField' id='futureAllocation-amountField-@i' name='Allocations[@i].Amount' value='@Model.Allocations[i].Amount' />
                                    <span class='allocationText'><span class="bold">@Loc.Dic.Allocation:</span> @Model.Allocations[i].Name (@existingMonth.Amount) <span class="bold">@Loc.Dic.Month:</span> @Html.GetMonthName(Model.Allocations[i].MonthId.Value) <span class="bold">@Loc.Dic.Amount:</span> <span class='amountText'>@Model.Allocations[i].Amount </span></span>
                                    <span class='exeedingMark' style='color: red;'>
                                        @if (isExeeding)
                                        {
                                            <text>(@Loc.Dic.ExeedingAllocation)</text>
                                        }
                                    </span>
                                    <input type='button' value='@Loc.Dic.Delete' onClick='removeAllocation("futureAllocation", @i)' />
                                </div>
                                }
                            }
                            else
                            {
                                <span>@Loc.Dic.NoAllocationsInOrder.</span>
                            }
                        </div>
                    </fieldset>
                    <br />
                    <span>@Loc.Dic.TotalAllocation: </span>
                    <input class="display" type="text" id="totalFutureAllocation" value="0" disabled="disabled" />
                </div>
            }

            <div id="NormalOrderContainer" @if (Model.IsFutureOrder)
                                           {<text>style="display:none;"</text>}>
                <fieldset id="normalAllocationsFieldset">
                    <legend>@Loc.Dic.BudgetAllocations</legend>

                    <div id="normalAllocationsContainer">
                        @if (!Model.IsFutureOrder && Model.Allocations.Count > 0)
                        {
                            List<int> distinctAllocations = Model.Allocations.Select(x => x.AllocationId).Distinct().ToList();
                            List<GAppsDev.Models.OrderAllocation> combinedAllocations = new List<GAppsDev.Models.OrderAllocation>();

                            foreach (int allocationId in distinctAllocations)
                            {
                                combinedAllocations.Add(new GAppsDev.Models.OrderAllocation()
                                {
                                    AllocationId = allocationId,
                                    Amount = Model.Allocations.Where(x => x.AllocationId == allocationId).Sum(x => x.Amount),
                                    IsActive = true,
                                    MonthId = null,
                                    Name = Model.Allocations.First(x => x.AllocationId == allocationId).Name
                                });
                            }

                            for (int i = 0; i < combinedAllocations.Count; i++)
                            {
                                bool allocationMonthExists = false;
                                DB.Budgets_Allocations existingAllocation = ((List<DB.Budgets_Allocations>)ViewBag.Allocations).SingleOrDefault(x => x.Id == Model.Allocations[i].AllocationId);
                                DB.Budgets_AllocationToMonth existingMonth = null;
                                if (existingAllocation != null)
                                {
                                    existingMonth = existingAllocation.Budgets_AllocationToMonth.SingleOrDefault(x => x.MonthId == Model.Allocations[i].MonthId);
                                    if (existingMonth != null)
                                    {
                                        allocationMonthExists = true;
                                    }
                                }

                                bool isExeeding = allocationMonthExists && Model.Allocations[i].Amount > existingMonth.Amount;
                            
                            <div id='normalAllocation-@i' class='existingNormalAllocations @if (isExeeding)
                                                                                           {<text>exeedingAllocation</text>}'>
                                <input type='hidden' class='isActiveField' id='normalAllocation-isActiveField-@i' name='Allocations[@i].IsActive' value='true' />
                                <input type='hidden' class='allocationIdField' id='normalAllocation-allocationIdField-@i' name='Allocations[@i].AllocationId' value='@combinedAllocations[i].AllocationId' />
                                <input type='hidden' class='monthIdField' id='normalAllocation-monthIdField-@i' name='Allocations[@i].MonthId' value='@combinedAllocations[i].MonthId' />
                                <input type='hidden' class='amountField' id='normalAllocation-amountField-@i' name='Allocations[@i].Amount' value='@combinedAllocations[i].Amount' />
                                <span class='allocationText'><span class="bold">@Loc.Dic.Allocation:</span> @combinedAllocations[i].Name (@existingMonth.Amount) <span class="bold">@Loc.Dic.Amount:</span> <span class='amountText'>@combinedAllocations[i].Amount </span></span>
                                <span class='exeedingMark' style='color: red;'>
                                    @if (isExeeding)
                                    {
                                        <text>(@Loc.Dic.ExeedingAllocation)</text>
                                    }
                                </span>
                                <input type='button' value='@Loc.Dic.Delete' onClick='removeAllocation("normalAllocation", @i)' />
                            </div>
                            }
                        }
                        else
                        {
                            <span>@Loc.Dic.NoAllocationsInOrder.</span>
                        }
                    </div>
                </fieldset>
                <br />
                <span>@Loc.Dic.TotalAllocation: </span>
                <input class="display" type="text" id="totalNormalAllocation" value="0" disabled="disabled" />
            </div>
        </div>
</fieldset>
<br />
        
<div class="editor-label">
    @Loc.Dic.NotesForSupplier
</div>
<div class="editor-field">
    @Html.TextAreaFor(model => model.Order.NotesForSupplier, new { maxlength = "250" })
    @Html.ValidationMessageFor(model => model.Order.NotesForSupplier)
</div>
<br />

<div class="editor-label">
    @Loc.Dic.NotesForApprover
</div>
<div class="editor-field">
    @Html.TextAreaFor(model => model.NotesForApprover, new { maxlength = "250" })
    @Html.ValidationMessageFor(model => model.NotesForApprover)
</div>

<p>
    <input type="submit" class="disableOnSubmit" value="@Loc.Dic.UpdateOrder" /> |
    @Html.ActionLink(Loc.Dic.BackToList, "MyOrders")
</p>
}