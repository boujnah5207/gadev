@model List<DB.Order>

@{
    string ReverseOrder;
    if (ViewBag.Order == "ASC")
    {
        ReverseOrder = "DESC";
    }
    else
    {
        ReverseOrder = "ASC";
    }
}

@if (ViewBag.IsCheckBoxed)
{
    <button type="button" id="selectAllOrders" onclick="$('.orderCheckbox').attr('checked', true)">@Loc.Dic.SelectAll</button> 
    <button type="button" id="deselectAllOrders" onclick="$('.orderCheckbox').attr('checked', false)">@Loc.Dic.SelectNone</button>
}
<table class="listTable">
    <tr class="headingRow">
        @if (ViewBag.IsCheckBoxed)
        {
            <th>
                @Loc.Dic.SelectedItems
            </th>
        }
        @if ((bool)ViewBag.IsOrdered)
        {
            <th>@Html.FilterLink((string)ViewBag.BaseUrl, Loc.Dic.OrderNumber, "number", ReverseOrder, (string)ViewBag.Sortby)</th>
            <th class="mobile-hidden">@Html.FilterLink((string)ViewBag.BaseUrl, Loc.Dic.LastChangeDate, "lastChange", ReverseOrder, (string)ViewBag.Sortby)</th>
            if (ViewBag.ShowUserName)
            {
            <th>@Html.FilterLink((string)ViewBag.BaseUrl, Loc.Dic.OrderCreatorName, "username", ReverseOrder, (string)ViewBag.Sortby)</th>
            }
            <th>@Html.FilterLink((string)ViewBag.BaseUrl, Loc.Dic.SupplierName, "supplier", ReverseOrder, (string)ViewBag.Sortby)</th>
            <th>@Html.FilterLink((string)ViewBag.BaseUrl, Loc.Dic.Price, "price", ReverseOrder, (string)ViewBag.Sortby)</th>
            <th>@Html.FilterLink((string)ViewBag.BaseUrl, Loc.Dic.Status, "status", ReverseOrder, (string)ViewBag.Sortby)</th>
            
        }
        else
        { 
            <th class="mobile-hidden">
                @Loc.Dic.LastChangeDate
            </th>
            <th>
                @Loc.Dic.OrderNumber
            </th>
            if (ViewBag.ShowUserName)
            {
            <th>
                @Loc.Dic.OrderCreatorName
            </th>
            }
            <th>
                @Loc.Dic.SupplierName
            </th>
            <th>
                @Loc.Dic.Price
            </th>
            <th>
                @Loc.Dic.Status
            </th>

        }

        <th>@Loc.Dic.Actions</th>
    </tr>
    @for (int index = 0; index < Model.Count; index++)
    {
        DB.Order item = Model[index];
        
        <tr class="@if (index % 2 != 0)
                   {<text>oddRow</text>}
                   else
                   {<text>evenRow</text>}" >
            @if (ViewBag.IsCheckBoxed)
            {
                <td>
                    <input type="checkbox" id="checkbox-@item.Id" class="orderCheckbox" value="@item.Id" name="selectedOrder" />
                </td>
            }
            <td>
                @Html.DisplayTextFor(modelItem => item.OrderNumber)
            </td>
            <td class="mobile-hidden">
                @Html.DisplayTextFor(modelItem => item.LastStatusChangeDate)
            </td>
            @if (ViewBag.ShowUserName)
            {
                <td>
                    @Html.DisplayTextFor(modelItem => item.User.FirstName) @Html.DisplayTextFor(modelItem => item.User.LastName)
                </td>
            }
            <td>
                @Html.DisplayTextFor(modelItem => item.Supplier.Name)
            </td>
            <td>
                @Html.DisplayTextFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayTextFor(modelItem => item.Orders_Statuses.Name)
            </td>

            <td>
                @Html.ActionLink(Loc.Dic.Details, "Details", new { id = item.Id })
                @if (item.Orders_Statuses.Id == (int)DA.StatusType.Pending || item.Orders_Statuses.Id == (int)DA.StatusType.PendingOrderCreator || item.Orders_Statuses.Id == (int)DA.StatusType.PartiallyApproved)
                {
                    if (item.UserId == ViewBag.CurrentUserId)
                    {
                        string editText;
                        if (item.Orders_Statuses.Id == (int)DA.StatusType.PendingOrderCreator)
                        {
                            editText = Loc.Dic.EditAndReturnToApprover;
                        }
                        else
                        {
                            editText = Loc.Dic.Edit;
                        }
                            
                    <text>|</text> @Html.ActionLink(editText, "Edit", new { id = item.Id })
                    <text>|</text> @Html.ActionLink(Loc.Dic.Delete, "Delete", new { id = item.Id })
                    }
                    if (DA.Roles.HasRole((DA.RoleType)ViewBag.UserRoles, DA.RoleType.SuperApprover) || (DA.Roles.HasRole((DA.RoleType)ViewBag.UserRoles, DA.RoleType.OrdersApprover) && item.NextOrderApproverId == ViewBag.CurrentUserId))
                    {
                    <text>|</text> @Html.ActionLink(Loc.Dic.UpdateStatus, "ModifyStatus", new { id = item.Id })
                    }
                }

                @if (DA.Roles.HasRole((DA.RoleType)ViewBag.UserRoles, DA.RoleType.OrdersWriter))
                {
                    if (item.Orders_Statuses.Id == (int)DA.StatusType.ApprovedPendingInvoice)
                    {
                    <text>|</text> @Html.ActionLink(Loc.Dic.PrintOrder, "DownloadOrderAsPdf", new { id = item.Id })
                
                        if (DA.Roles.HasRole((DA.RoleType)ViewBag.UserRoles, DA.RoleType.SystemManager))
                        {
                    <text>|</text> @Html.ActionLink(Loc.Dic.UploadInvoice, "UploadInvoiceFile", new { id = item.Id })
                        }
                    }
                }
                @if (item.Orders_Statuses.Id == (int)DA.StatusType.InvoiceApprovedByOrderCreatorPendingFileExport)
                {
                    <text>|</text> @Html.ActionLink(Loc.Dic.PrintOrder, "DownloadOrderAsPdf", new { id = item.Id })
                
                    
                }
                @if (item.Orders_Statuses.Id == (int)DA.StatusType.InvoiceExportedToFilePendingReceipt)
                {
                    if (DA.Roles.HasRole((DA.RoleType)ViewBag.UserRoles, DA.RoleType.SystemManager))
                    {
                    <text>|</text> @Html.ActionLink(Loc.Dic.UploadReceipt, "UploadReceiptFile", new { id = item.Id })
                    }
                }
                @if (item.Orders_Statuses.Id == (int)DA.StatusType.InvoiceScannedPendingOrderCreator && item.UserId == ViewBag.CurrentUserId)
                {
                    <text>|</text> @Html.ActionLink(Loc.Dic.InvoiceApproval, "InvoiceApproval", new { id = item.Id })
                }
                @if (!item.WasAddedToInventory && DA.Roles.HasRole((DA.RoleType)ViewBag.UserRoles, DA.RoleType.InventoryManager) && item.Orders_Statuses.Id >= (int)DA.StatusType.InvoiceApprovedByOrderCreatorPendingFileExport)
                {
                    <text>|</text> @Html.ActionLink(Loc.Dic.AddToInventory, "AddToInventory", new { id = item.Id })
                }
            </td>
        </tr>
    }
</table>
@if ((bool)ViewBag.IsPaged)
{ 
    <br />  
    @Html.Pagination((string)ViewBag.BaseUrl, (int)ViewBag.NumberOfPages, 10, (int)ViewBag.CurrPage, (string)ViewBag.Sortby, (string)ViewBag.Order)
}